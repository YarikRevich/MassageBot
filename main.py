import aiogram
import asyncio
import os
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.builtin import CommandHelp,IDFilter
from data.contrib import Record, Service
from tutorial.tutorial import Tutorial
from tutorial.quiz import random_fact
from states import AddService


TOKEN = os.getenv("TOKEN")
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

record = Record()
service = Service()

tutorial = Tutorial()
new_service = {}


@dp.message_handler(IDFilter(user_id=os.getenv("USER_ID")), state="*", commands=["start"])
async def start_func(message: types.Message):

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="TUTORIALyes",text="–î–∞")
    button2 = types.InlineKeyboardButton(callback_data="TUTORIALno",text="–ù–µ—Ç")
    markup.add(button1, button2)
    await message.answer("üòúHello!–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω—ã–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞ http://emassage.com\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ:\n- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\n- –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏\n- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n‚ùóÔ∏è–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–æ–∑—Ä–∞–±–æ—Ç–∫–µ,–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è")
    await message.answer("ü•∫–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ?",reply_markup=markup)


@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É",state="*")
async def start_adding_service(message: types.Message):

    current_state = dp.current_state(user=message.from_user.id)
    await current_state.set_state(AddService.CONFIRMING)
    
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="CONFIRMINGno", text="–ù–µ—Ç")
    button2 = types.InlineKeyboardButton(callback_data="CONFIRMINGyes", text="–î–∞")
    markup.add(button1, button2)

    await message.answer("–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏. –í–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=markup)


@dp.message_handler(state=AddService.NAME)
async def add_name_service(message: types.Message):

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="NAMEno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
    button2 = types.InlineKeyboardButton(callback_data="NAMEyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    markup.add(button1, button2)
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '%s'.–í—ã —É–≤–µ—Ä–µ–Ω—ã?" % (message.text), reply_markup=markup) 


@dp.message_handler(state=AddService.DESCRIPTION)
async def add_description_service(message: types.Message):

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="DESCRIPTIONno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
    button2 = types.InlineKeyboardButton(callback_data="DESCRIPTIONyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    markup.add(button1, button2)
    await message.answer("–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ '%s'.–í—ã —É–≤–µ—Ä–µ–Ω—ã?" % (message.text), reply_markup=markup) 


@dp.message_handler(state=AddService.PRICE)
async def add_description_service(message: types.Message):

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="PRICEno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
    button2 = types.InlineKeyboardButton(callback_data="PRICEyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    markup.add(button1, button2)
    await message.answer("–¶–µ–Ω–∞ –Ω–æ–≤–æ—Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —É—Å–ª—É–≥–∏ '%s'.–ü—Ä–æ–¥–æ–ª–∂–∏–º?" % (message.text), reply_markup=markup) 


@dp.message_handler(state=AddService.PHOTO, content_types=["photo"])
async def image_getter(file :types.InputMediaPhoto):

    photo = await file["photo"][0].get_file()
    photo_to_send = await bot.download_file(photo.file_path)
    await bot.send_photo(file.chat.id, photo=photo_to_send.read())
    new_service[file.from_user.id]["photo"] = photo
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="PHOTOno", text="–ù–µ—Ç")
    button2 = types.InlineKeyboardButton(callback_data="PHOTOyes", text="–î–∞")
    markup.add(button1, button2)

    await bot.send_message(file.chat.id, text="–¢–æ—á–Ω–æ?", reply_markup=markup)


@dp.message_handler(state=AddService.PHOTO)
async def image_getter(message :types.Message):
    await message.answer(text="–¢–µ–∫—Å—Ç - –Ω–µ —Ñ–æ—Ç–æ!")


@dp.message_handler(CommandHelp(),IDFilter(user_id=os.getenv("USER_ID")),state="*")
async def help_command(message :types.Message):
    await message.answer("‚ùóÔ∏è–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Ä–æ–∑—Ä–∞–±–æ—Ç–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–∞–π—Ç–∞ http://emassage.name")


@dp.message_handler(state="*")
async def user_is_not_owner(message: types.Message):
    await message.answer("üòî–¢—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")


@dp.callback_query_handler(lambda query: (query.data in ["EUR", "USD", "UAH", "CHF"]), state="*")
async def currency_callback(query: types.CallbackQuery):
    
    if query.data == "EUR":

        new_service[query.from_user.id]["currency"] = "EUR"
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.CURRENCY)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="CURRENCYno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
        button2 = types.InlineKeyboardButton(callback_data="CURRENCYyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        markup.add(button1, button2)
        
        return await query.message.answer("–í–∞–ª—é—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ - 'EUR'.–ü—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=markup) 


    elif query.data == "USD":

        new_service[query.from_user.id]["currency"] = "USD"
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.CURRENCY)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="CURRENCYno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
        button2 = types.InlineKeyboardButton(callback_data="CURRENCYyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        markup.add(button1, button2)
        
        return await query.message.answer("–í–∞–ª—é—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ - 'USD'.–ü—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=markup) 


    elif query.data == "UAH":

        new_service[query.from_user.id]["currency"] = "UAH"
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.CURRENCY)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="CURRENCYno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
        button2 = types.InlineKeyboardButton(callback_data="CURRENCYyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        markup.add(button1, button2)
        
        return await query.message.answer("–í–∞–ª—é—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ - 'UAH'.–ü—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=markup) 


    elif query.data == "CHF":

        new_service[query.from_user.id]["currency"] = "CHF"
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.CURRENCY)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="CURRENCYno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
        button2 = types.InlineKeyboardButton(callback_data="CURRENCYyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        markup.add(button1, button2)
        
        return await query.message.answer("–í–∞–ª—é—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ - 'CHF'.–ü—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=markup) 


@dp.callback_query_handler(lambda query: query.data == "tutorial", state="*")
async def tutorial_callback(query: types.CallbackQuery):

    for index in range(-1,7):
        await bot.delete_message(chat_id=query.message.chat.id,message_id=query.message.message_id+index)
    await query.message.answer(text="üòò–ú–æ–ª–æ–¥–µ—Ü!–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ!\n–ê –∫–∞–∫ –Ω–∞–≥—Ä–∞–¥—É,–ø—É–ª–∏—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç!")
    await query.message.answer(text=await random_fact())
    loop = asyncio.get_running_loop()
    loop.create_task(record.start_pooling(bot))
    await query.message.answer(text="‚ò∫Ô∏è–ù—É,–∞ —è,–Ω–∞—á–Ω—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–∏–∞–Ω—Å—ã!")


@dp.callback_query_handler(lambda query: ( query.data in ["TUTORIALno", "TUTORIALyes"] ), state="*")
async def tutorial_passage(query :types.CallbackQuery):

    if query.data == "TUTORIALyes":
        for index in range(-1,1):
            await bot.delete_message(chat_id=query.message.chat.id,message_id=query.message.message_id+index)
        return await tutorial.send_tutorial(query)

    elif query.data == "TUTORIALno":
        loop = asyncio.get_running_loop()
        loop.create_task(record.start_pooling(bot))
        for index in range(-1,1):
            await bot.delete_message(chat_id=query.message.chat.id,message_id=query.message.message_id+index)

        markup = types.ReplyKeyboardMarkup()
        button1 = types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É")
        markup.add(button1)

        return await query.message.answer("üòî–ù—É –ª–∞–¥–Ω–æ,–Ω–∞—á–Ω—É-–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–∏–∞–Ω—Å—ã", reply_markup=markup)


@dp.callback_query_handler(lambda query: ( query.data in 
    ["CONFIRMINGno", "CONFIRMINGyes", "NAMEno", "NAMEyes", 
    "DESCRIPTIONno", "DESCRIPTIONyes", "PRICEno", "PRICEyes", 
    "CURRENCYno", "CURRENCYyes", "PHOTOno", "PHOTOyes"]), state="*")
async def callback(query: types.CallbackQuery):


    if query.data == "CONFIRMINGno":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù—É –ª–∞–¥–Ω–æ")

    elif query.data == "CONFIRMINGyes":
        new_service[query.from_user.id] = {}
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.NAME)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–û–∫, –Ω–∞—á–Ω–µ–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è")


    elif query.data == "NAMEno":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.NAME)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")

    elif query.data == "NAMEyes":
        new_service[query.from_user.id]["name"] = query.message.text.split("'")[1]
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.DESCRIPTION)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é")

    elif query.data == "DESCRIPTIONno":

        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.DESCRIPTION)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")

    elif query.data == "DESCRIPTIONyes":
        new_service[query.from_user.id]["description"] = query.message.text.split("'")[1]
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.PRICE)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏")

    elif query.data == "PRICEno":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.PRICE)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥—É—é —Ü–µ–Ω—É")


    elif query.data == "PRICEyes":

        new_service[query.from_user.id]["price"] = query.message.text.split("'")[1]
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.CURRENCY)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        await query.message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –≤–∞–ª—é—Ç–µ")

        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="EUR", text="EUR")
        button2 = types.InlineKeyboardButton(callback_data="USD", text="USD")
        button3 = types.InlineKeyboardButton(callback_data="UAH", text="UAH")
        button4 = types.InlineKeyboardButton(callback_data="CHF", text="CHF")
        markup.add(button1, button2, button3, button4)

        return await query.message.answer("–í–∏–±–µ—Ä–µ—Ç–µ", reply_markup=markup)


    elif query.data == "CURRENCYno":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.CURRENCY)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ü–æ–º–µ–Ω—è–π—Ç–µ –≤–∞–ª—é—Ç—É")

    elif query.data == "CURRENCYyes":
        new_service[query.from_user.id]["currency"] = query.message.text.split("'")[1]
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.PHOTO)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–í—Ä–µ–º—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —É—Å–ª—É–≥–∏.")

    elif query.data == "PHOTOno":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.PHOTO)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–û–∫,–ø–æ–º–µ–Ω—è–π—Ç–µ —Ñ–æ—Ç–æ")

    elif query.data == "PHOTOyes":
        current_state = dp.current_state(user=query.from_user.id)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        await service.test_new_service(bot, query,new_service[query.from_user.id])
        await query.message.answer("–ü—Ä–æ–≤–µ—Ä—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏")
        await query.message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?")


@dp.callback_query_handler(lambda query: True, state="*")
async def client_confirmation(query: types.CallbackQuery):

    author_name = await record.utils.update_data_and_get_author(params={"pk": query.data}, json_data={"status": True})
    await bot.edit_message_text(text=f"‚úÖ–ó–∞–∫–∞–∑ –¥–ª—è {author_name} - –≤—ã–ø–æ–ª–Ω–µ–Ω", 
            message_id=query.message.message_id, 
            chat_id=query.message.chat.id)    


if __name__ == "__main__":
    executor.start_polling(dp, timeout=10, skip_updates=True)
