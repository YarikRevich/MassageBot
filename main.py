import aiogram
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import os
import quiz

from aiogram.dispatcher.filters.builtin import CommandHelp,IDFilter
from data import start_pooling, data, send_tutorial

TOKEN = os.getenv("TOKEN")
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


@dp.message_handler(IDFilter(user_id=os.getenv("USER_ID")), state="*", commands=["start"])
async def start_func(message: types.Message):

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="yes",text="–î–∞")
    button2 = types.InlineKeyboardButton(callback_data="no",text="–ù–µ—Ç")
    markup.add(button1, button2)
    await message.answer("üòúHello!–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω—ã–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞ http://emassage.com\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ:\n- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\n- –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏\n- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n‚ùóÔ∏è–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–æ–∑—Ä–∞–±–æ—Ç–∫–µ,–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è")
    await message.answer("ü•∫–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ?",reply_markup=markup)


@dp.callback_query_handler(lambda query: True, state="*")
async def callback(query: types.CallbackQuery):

    if query.data == "yes":
        for index in range(-1,1):
            await bot.delete_message(chat_id=query.message.chat.id,message_id=query.message.message_id+index)
        return await send_tutorial(query)

    elif query.data == "no":
        loop = asyncio.get_running_loop()
        loop.create_task(start_pooling(bot))
        for index in range(-1,1):
            await bot.delete_message(chat_id=query.message.chat.id,message_id=query.message.message_id+index)

        return await query.message.answer("üòî–ù—É –ª–∞–¥–Ω–æ,–Ω–∞—á–Ω—É-–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–∏–∞–Ω—Å—ã")

    elif query.data == "tutorial":
        for index in range(-1,7):
            await bot.delete_message(chat_id=query.message.chat.id,message_id=query.message.message_id+index)
        await query.message.answer(text="üòò–ú–æ–ª–æ–¥–µ—Ü!–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ!\n–ê –∫–∞–∫ –Ω–∞–≥—Ä–∞–¥—É,–ø—É–ª–∏—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç!")
        await query.message.answer(text=await quiz.random_fact())
        loop = asyncio.get_running_loop()
        loop.create_task(start_pooling(bot))
        return await query.message.answer(text="‚ò∫Ô∏è–ù—É,–∞ —è,–Ω–∞—á–Ω—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–∏–∞–Ω—Å—ã!")

    data.update_data({"status": True}, {"pk": query.data})
    author_name = data.get_data(get_params={"pk": query.data})["author"]
    
    await bot.edit_message_text(text=f"‚úÖ–ó–∞–∫–∞–∑ –¥–ª—è {author_name} - –≤—ã–ø–æ–ª–Ω–µ–Ω", 
            message_id=query.message.message_id, 
            chat_id=query.message.chat.id)


@dp.message_handler(CommandHelp(),IDFilter(user_id=os.getenv("USER_ID")),state="*")
async def help_command(message :types.Message):
    await message.answer("‚ùóÔ∏è–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Ä–æ–∑—Ä–∞–±–æ—Ç–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–∞–π—Ç–∞ http://emassage.name")


@dp.message_handler(state="*")
async def user_is_not_owner(message: types.Message):
    await message.answer("üòî–¢—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")


if __name__ == "__main__":
    executor.start_polling(dp, timeout=10, skip_updates=True)
