import aiogram
import asyncio
import os
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters.builtin import CommandHelp,IDFilter
from data.contrib import Record, Service, DoctorInfo
from tutorial.tutorial import Tutorial
from tutorial.quiz import random_fact
from states import AddService, AddChangeInfo
from validators import TypeValidator

#All the important data for the futher work

TOKEN = os.getenv("TOKEN")
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

#Important instances of classes for the futher work

record = Record()
service = Service()
info = DoctorInfo()
tutorial = Tutorial()

#A dict for the adding a new service 

new_service = {}
new_info = {}

#------------------

@dp.message_handler(IDFilter(user_id=os.getenv("USER_ID")), state="*", commands=["start"])
async def start_func(message: types.Message):
    """Handler for the /start command to start a relationship between user and bot"""    

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="TUTORIALyes",text="–î–∞")
    button2 = types.InlineKeyboardButton(callback_data="TUTORIALno",text="–ù–µ—Ç")
    markup.add(button1, button2)
    await message.answer("üòúHello!–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω—ã–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞ http://emassage.com\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ:\n- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\n- –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏\n- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n‚ùóÔ∏è–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–æ–∑—Ä–∞–±–æ—Ç–∫–µ,–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è")
    await message.answer("ü•∫–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ?",reply_markup=markup)


@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É",state="*")
async def start_adding_service(message: types.Message):
    """A handler to start an adding of a new service"""

    current_state = dp.current_state(user=message.from_user.id)
    await current_state.set_state(AddService.CONFIRMING)
    
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="CONFIRMINGno", text="–ù–µ—Ç")
    button2 = types.InlineKeyboardButton(callback_data="CONFIRMINGyes", text="–î–∞")
    markup.add(button1, button2)

    await message.answer("–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏. –í–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=markup)


@dp.message_handler(lambda message: (message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —Å–µ–±—è"), state="*")
async def start_editing_info_about_me(message: types.Message):
    await info.get_about_text(bot, message)


@dp.callback_query_handler(lambda query: (query.data in ["CHANGEyes", "CHANGEno"]))
async def change_about_text(query: types.InlineQuery):

    if query.data == "CHANGEyes":
        for index in range(-1,1):
            await bot.delete_message(query.message.chat.id, message_id=query.message.message_id + index)
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddChangeInfo.INFO)
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    else:
        for index in range(-1,1):
            await bot.delete_message(query.message.chat.id, message_id=query.message.message_id + index)
        await query.message.answer("–û–∫")


@dp.callback_query_handler(lambda query: (query.data in ["ADDABOUTyes", "ADDABOUTno"]))
async def change_about_text(query: types.InlineQuery):

    if query.data == "ADDABOUTyes":
        for index in range(-1,1):
            await bot.delete_message(query.message.chat.id, message_id=query.message.message_id + index)
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddChangeInfo.INFO)
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    else:
        for index in range(-1,1):
            await bot.delete_message(query.message.chat.id, message_id=query.message.message_id + index)
        await query.message.answer("–û–∫")


@dp.message_handler(state=AddChangeInfo.INFO)
async def set_new_text(message: types.Message):
    if message.text:
        await message.answer(message.text)

        new_info[message.from_user.id] = {"about_text": message.text}
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="CHANGEINFOyes", text="–î–∞")
        button2 = types.InlineKeyboardButton(callback_data="CHANGEINFOno", text="–ù–µ—Ç")
        markup.add(button1, button2)
        
        current_state = dp.current_state(user=message.from_user.id)
        await current_state.set_state(AddChangeInfo.CONFIRMING)

        return await message.answer("–í–∞–º –≤—Å–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è?", reply_markup=markup)
    await message.answer("–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏")


@dp.callback_query_handler(lambda query: (query.data in ["CHANGEINFOyes", "CHANGEDINFOno"]),state=AddChangeInfo.CONFIRMING)
async def agree_with_changed_text(query: types.InlineQuery):
    
    if query.data == "CHANGEINFOyes":
        
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="ADDDEVERSIONyes", text="–î–∞")
        button2 = types.InlineKeyboardButton(callback_data="ADDDEVERSIONno", text="–ù–µ—Ç")
        markup.add(button1, button2)

        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddChangeInfo.AGGRE_WITH_START_ADD_DE_VERSION)

        await query.message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑–∏–∫–µ?", reply_markup=markup)
    else:
        del new_info[query.from_user.id]

        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="AGREEWITHCHANGEyes", text="–î–∞")
        button2 = types.InlineKeyboardButton(callback_data="AGREEWITHCHANGEno", text="–ù–µ—Ç")

        await query.message.answer("–ñ–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?")


@dp.callback_query_handler(lambda query: (query.data in ["ADDDEVERSIONyes", "ADDDEVERSIONno"]), state=AddChangeInfo.AGGRE_WITH_START_ADD_DE_VERSION)
async def add_de_version(query: types.InlineQuery):

    current_state = dp.current_state(user=query.from_user.id)

    if query.data == "ADDDEVERSIONyes":
    
        await current_state.set_state(AddChangeInfo.ADD_DE_VERSION)
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")

    else:

        await info.set_about_text(bot, query, new_info[query.from_user.id])
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        del new_info[query.from_user.id]
        await query.message.answer("–û–∫.–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


@dp.message_handler(state=AddChangeInfo.ADD_DE_VERSION)
async def confirm_adding_de_version(message: types.Message):

    if message.text:

        new_info[message.from_user.id]["about_text_de"] = message.text

        await message.answer(message.text)

        current_state = dp.current_state(user=message.from_user.id)
        await current_state.set_state(AddChangeInfo.ADD_DE_VERSION_CONFIRMING)    

        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="AGREEWITHDEyes", text="–î–∞")
        button2 = types.InlineKeyboardButton(callback_data="AGREEWITHDEno", text="–ù–µ—Ç")  
        markup.add(button1, button2)

        return await message.answer("–í–∞–º –≤—Å–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è?", reply_markup=markup)

    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")


@dp.callback_query_handler(lambda query: (query.data in ["AGREEWITHDEyes", "AGREEWITHDEno"]), state = AddChangeInfo.ADD_DE_VERSION_CONFIRMING)
async def confirming_de_version(query: types.InlineQuery):

    if query.data == "AGREEWITHDEyes":
        
        await info.set_about_text(bot, query, new_info[query.from_user.id])
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        del new_info[query.from_user.id]
        await query.message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="WANNACHANGEyes", text="–î–∞")
        button2 = types.InlineKeyboardButton(callback_data="WANNACHANGEno", text="–ù–µ—Ç")  
        await query.message.answer("–ñ–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å?", reply_markup=markup)


@dp.callback_query_handler(lambda query: (query.data in ["WANNACHANGEyes", "WANNACHANGEno"]))
async def wanna_change_de_version(query: types.InlineQuery):

    if query.data == "WANNACHANGEyes":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddChangeInfo.ADD_DE_VERSION)
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?")
    else:
        del new_info[query.from_user.id]["about_text_de"]
        await info.set_about_text(bot, query, new_info[query.from_user.id])
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        await query.message.answer("–û–∫, –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")


@dp.callback_query_handler(lambda query: (query.data in ["AGREEWITHCHANGEyes", "AGREEWITHCHANGEno"]))
async def change_filled_text(query: types.InlineQuery):
    if query.data == "AGREEWITHCHANGEyes":
        await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddChangeInfo.INFO)
    else:
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        await query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")



@dp.message_handler(state=AddService.NAME)
async def add_name_to_service(message: types.Message):
    """Handler to process the adding of a name to a new service"""

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="NAMEno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
    button2 = types.InlineKeyboardButton(callback_data="NAMEyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    markup.add(button1, button2)
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '%s'.–í—ã —É–≤–µ—Ä–µ–Ω—ã?" % (message.text), reply_markup=markup) 


@dp.message_handler(state=AddService.NAME_DE)
async def add_name_to_service(message: types.Message):
    """Handler to process the adding of a name to a new service"""

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="NAME_DE_no", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
    button2 = types.InlineKeyboardButton(callback_data="NAME_DE_yes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    markup.add(button1, button2)
    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º '%s'.–í—ã —É–≤–µ—Ä–µ–Ω—ã?" % (message.text), reply_markup=markup) 


@dp.message_handler(state=AddService.DESCRIPTION)
async def add_description_to_service(message: types.Message):
    """Handler to process the adding of a description to a new service"""

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="DESCRIPTIONno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
    button2 = types.InlineKeyboardButton(callback_data="DESCRIPTIONyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    markup.add(button1, button2)
    await message.answer("–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ '%s'.–í—ã —É–≤–µ—Ä–µ–Ω—ã?" % (message.text), reply_markup=markup) 


@dp.message_handler(state=AddService.DESCRIPTION_DE)
async def add_description_to_service(message: types.Message):
    """Handler to process the adding of a description to a new service"""

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="DESCRIPTION_DE_no", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
    button2 = types.InlineKeyboardButton(callback_data="DESCRIPTION_DE_yes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    markup.add(button1, button2)
    await message.answer("–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Ç–∞–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º '%s'.–í—ã —É–≤–µ—Ä–µ–Ω—ã?" % (message.text), reply_markup=markup) 


@dp.message_handler(state=AddService.PRICE)
async def add_price_to_service(message: types.Message):
    """Handler to process the adding of a price to a new service"""

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="PRICEno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
    button2 = types.InlineKeyboardButton(callback_data="PRICEyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    markup.add(button1, button2)
    if await TypeValidator.is_digit(message.text):
        return await message.answer("–¶–µ–Ω–∞ –Ω–æ–≤–æ—Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —É—Å–ª—É–≥–∏ '%s'.–ü—Ä–æ–¥–æ–ª–∂–∏–º?" % (message.text), reply_markup=markup) 
    await message.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º! –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")


@dp.callback_query_handler(lambda query: (query.data in ["EUR", "USD", "UAH", "CHF"]), state="*")
async def add_currency_to_service(query: types.CallbackQuery):
    """Handler to process the adding of a currency to a new service"""
    
    if query.data == "EUR":

        new_service[query.from_user.id]["currency"] = "EUR"
        await bot.delete_message(query.message.chat.id, message_id=query.message.message_id)
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.CURRENCY)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="CURRENCYno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
        button2 = types.InlineKeyboardButton(callback_data="CURRENCYyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        markup.add(button1, button2)
        
        return await query.message.answer("–í–∞–ª—é—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ - 'EUR'.–ü—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=markup) 


    elif query.data == "USD":

        new_service[query.from_user.id]["currency"] = "USD"
        await bot.delete_message(query.message.chat.id, message_id=query.message.message_id)
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.CURRENCY)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="CURRENCYno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
        button2 = types.InlineKeyboardButton(callback_data="CURRENCYyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        markup.add(button1, button2)
        
        return await query.message.answer("–í–∞–ª—é—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ - 'USD'.–ü—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=markup) 


    elif query.data == "UAH":

        new_service[query.from_user.id]["currency"] = "UAH"
        await bot.delete_message(query.message.chat.id, message_id=query.message.message_id)
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.CURRENCY)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="CURRENCYno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
        button2 = types.InlineKeyboardButton(callback_data="CURRENCYyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        markup.add(button1, button2)
        
        return await query.message.answer("–í–∞–ª—é—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ - 'UAH'.–ü—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=markup) 


    elif query.data == "CHF":

        new_service[query.from_user.id]["currency"] = "CHF"
        await bot.delete_message(query.message.chat.id, message_id=query.message.message_id)
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.CURRENCY)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="CURRENCYno", text="–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å")
        button2 = types.InlineKeyboardButton(callback_data="CURRENCYyes", text="–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        markup.add(button1, button2)
        
        return await query.message.answer("–í–∞–ª—é—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ - 'CHF'.–ü—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=markup) 



@dp.message_handler(state=AddService.PHOTO, content_types=["photo"])
async def add_image_to_service(file :types.InputMediaPhoto):
    """Handler to process the adding of a photo to a new service"""

    photo = await file["photo"][0].get_file()
    photo_to_send = await bot.download_file(photo.file_path)
    await bot.send_photo(file.chat.id, photo=photo_to_send.read())
    new_service[file.from_user.id]["photo"] = photo
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(callback_data="PHOTOno", text="–ù–µ—Ç")
    button2 = types.InlineKeyboardButton(callback_data="PHOTOyes", text="–î–∞")
    markup.add(button1, button2)

    await bot.send_message(file.chat.id, text="–¢–æ—á–Ω–æ?", reply_markup=markup)


@dp.message_handler(state=AddService.PHOTO)
async def image_getter(message :types.Message):
    """Handler to notificate user that he needs to a photo not a text"""

    await message.answer(text="–¢–µ–∫—Å—Ç - –Ω–µ —Ñ–æ—Ç–æ!")


@dp.message_handler(CommandHelp(),IDFilter(user_id=os.getenv("USER_ID")),state="*")
async def help_command(message :types.Message):
    """Sends some information about this bot"""

    await message.answer("‚ùóÔ∏è–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Ä–æ–∑—Ä–∞–±–æ—Ç–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–∞–π—Ç–∞ http://emassage.name")


@dp.message_handler(state="*")
async def user_is_not_owner(message: types.Message):
    """Handler to send that user is not an owner"""

    await message.answer("üòî–¢—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞")


@dp.callback_query_handler(lambda query: query.data == "tutorial", state="*")
async def tutorial_callback(query: types.CallbackQuery):
    """Handler for the test confirming button"""

    for index in range(-1,7):
        await bot.delete_message(chat_id=query.message.chat.id,message_id=query.message.message_id+index)
    await query.message.answer(text="üòò–ú–æ–ª–æ–¥–µ—Ü!–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ!\n–ê –∫–∞–∫ –Ω–∞–≥—Ä–∞–¥—É,–ø—É–ª–∏—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç!")
    await query.message.answer(text=await random_fact())
    loop = asyncio.get_running_loop()
    loop.create_task(record.start_pooling(bot))
    await query.message.answer(text="‚ò∫Ô∏è–ù—É,–∞ —è,–Ω–∞—á–Ω—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–∏–∞–Ω—Å—ã!")


@dp.callback_query_handler(lambda query: ( query.data in ["TUTORIALno", "TUTORIALyes"] ), state="*")
async def tutorial_passage(query :types.CallbackQuery):
    """Handler to understand wether user wants to pass a tutorial"""

    if query.data == "TUTORIALyes":
        for index in range(-1,1):
            await bot.delete_message(chat_id=query.message.chat.id,message_id=query.message.message_id+index)
        return await tutorial.send_tutorial(query)

    elif query.data == "TUTORIALno":
        loop = asyncio.get_running_loop()
        loop.create_task(record.start_pooling(bot))
        for index in range(-1,1):
            await bot.delete_message(chat_id=query.message.chat.id,message_id=query.message.message_id+index)

        markup = types.ReplyKeyboardMarkup()
        button1 = types.KeyboardButton(text = "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É")
        button2 = types.KeyboardButton(text = "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —Å–µ–±—è")
        button3 = types.KeyboardButton(text = "–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        markup.add(button1, button2, button3)

        return await query.message.answer("üòî–ù—É –ª–∞–¥–Ω–æ,–Ω–∞—á–Ω—É-–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–∏–∞–Ω—Å—ã", reply_markup=markup)


@dp.callback_query_handler(lambda query: ( query.data in 
    ["CONFIRMINGno", "CONFIRMINGyes", "NAMEno", "NAMEyes",
    "NAME_DE_no", "NAME_DE_yes", "DESCRIPTIONno", "DESCRIPTIONyes",
    "DESCRIPTION_DE_no", "DESCRIPTION_DE_yes", "PRICEno", "PRICEyes",
    "CURRENCYno", "CURRENCYyes", "PHOTOno", "PHOTOyes"]), state="*")
async def callback(query: types.CallbackQuery):
    """Handler for the creating a new service.
    Contains:
    -> CONFIRMING processor
    -> NAME processor
    -> DESCRIPTION processor
    -> PRICE processor
    -> CURRENCY processor
    -> PHOTO processor
    """

    if query.data == "CONFIRMINGno":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù—É –ª–∞–¥–Ω–æ")

    elif query.data == "CONFIRMINGyes":
        new_service[query.from_user.id] = {}
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.NAME)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–û–∫, –Ω–∞—á–Ω–µ–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è")


    elif query.data == "NAMEno":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.NAME)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")

    elif query.data == "NAMEyes":
        new_service[query.from_user.id]["name"] = query.message.text.split("'")[1]
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.NAME_DE)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º")

    elif query.data == "NAME_DE_no":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.NAME_DE)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")

    elif query.data == "NAME_DE_yes":
        new_service[query.from_user.id]["name_de"] = query.message.text.split("'")[1]
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.DESCRIPTION)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é")

    elif query.data == "DESCRIPTIONno":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.DESCRIPTION)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")

    elif query.data == "DESCRIPTIONyes":
        new_service[query.from_user.id]["description"] = query.message.text.split("'")[1]
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.DESCRIPTION_DE)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º")

    elif query.data == "DESCRIPTION_DE_no":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.DESCRIPTION_DE)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º")

    elif query.data == "DESCRIPTION_DE_yes":
        new_service[query.from_user.id]["description_de"] = query.message.text.split("'")[1]
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.PRICE)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏")

    elif query.data == "PRICEno":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.PRICE)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥—É—é —Ü–µ–Ω—É")


    elif query.data == "PRICEyes":

        new_service[query.from_user.id]["price"] = query.message.text.split("'")[1]
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.CURRENCY)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        await query.message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –≤–∞–ª—é—Ç–µ")

        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="EUR", text="EUR")
        button2 = types.InlineKeyboardButton(callback_data="USD", text="USD")
        button3 = types.InlineKeyboardButton(callback_data="UAH", text="UAH")
        button4 = types.InlineKeyboardButton(callback_data="CHF", text="CHF")
        markup.add(button1, button2, button3, button4)

        return await query.message.answer("–í–∏–±–µ—Ä–µ—Ç–µ", reply_markup=markup)


    elif query.data == "CURRENCYno":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.CURRENCY)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–ü–æ–º–µ–Ω—è–π—Ç–µ –≤–∞–ª—é—Ç—É")

    elif query.data == "CURRENCYyes":
        new_service[query.from_user.id]["currency"] = query.message.text.split("'")[1]
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.PHOTO)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–í—Ä–µ–º—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —É—Å–ª—É–≥–∏.")

    elif query.data == "PHOTOno":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.PHOTO)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        return await query.message.answer("–û–∫,–ø–æ–º–µ–Ω—è–π—Ç–µ —Ñ–æ—Ç–æ")

    elif query.data == "PHOTOyes":
        current_state = dp.current_state(user=query.from_user.id)
        await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
        await service.test_new_service(bot, query,new_service[query.from_user.id])
        await query.message.answer("–ü—Ä–æ–≤–µ—Ä—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏")

        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="ADDyes", text="–î–∞")
        button2 = types.InlineKeyboardButton(callback_data="ADDno", text="–ù–µ—Ç")
        markup.add(button1, button2)

        await query.message.answer("–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", reply_markup=markup)


@dp.callback_query_handler(lambda query: (query.data in ["ADDyes", "ADDno"]), state="*")
async def service_add_confiramtion(query: types.CallbackQuery):
    """Handler to understand wether user wants to add a new service"""

    if query.data == "ADDyes":

        await service.create_new_service(bot, query, new_service[query.from_user.id])
        await bot.delete_message(query.message.chat.id, message_id=query.message.message_id)
        await query.message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

    elif query.data == "ADDno":

        await bot.delete_message(query.message.chat.id, message_id=query.message.message_id)
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(callback_data="REWRITEyes", text="–î–∞")
        button2 = types.InlineKeyboardButton(callback_data="REWRITEno", text="–ù–µ—Ç")
        markup.add(button1, button2)

        await query.message.answer("–û–∫,—Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å?", reply_markup=markup)


@dp.callback_query_handler(lambda query: ( query.data in ["REWRITEyes", "REWRITEno"]), state="*")
async def rewrite_confiramation(query: types.CallbackQuery):
    """Handler to understand whether user wants to rewrite his new service or not"""

    if query.data == "REWRITEyes":
    
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.NAME)
        await query.message.answer("–•–æ—Ä–æ—à–æ –Ω–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞.–ê –∏–º–µ–Ω–Ω–æ —Å –Ω–∞–∑–≤–∞–Ω–∏—è")
        

    elif query.data == "REWRITEno":

        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        await query.message.answer("–ù—É –ª–∞–¥–Ω–æ")
    




@dp.callback_query_handler(lambda query: True, state="*")
async def client_confirmation(query: types.CallbackQuery):
    """A callback hander to make the record inactive and done"""

    author_name = await record.utils.update_data_and_get_author(params={"pk": query.data}, json_data={"status": True})
    await bot.edit_message_text(text=f"‚úÖ–ó–∞–∫–∞–∑ –¥–ª—è {author_name} - –≤—ã–ø–æ–ª–Ω–µ–Ω", 
            message_id=query.message.message_id, 
            chat_id=query.message.chat.id)    


if __name__ == "__main__":
    executor.start_polling(dp, timeout=10, skip_updates=True)
