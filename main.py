import aiogram
import asyncio
import os
import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.builtin import CommandHelp,IDFilter
from data.contrib import Record, Service, DoctorInfo, VisitImage, utils
from tutorial.tutorial import Tutorial
from tutorial.quiz import random_fact
from massagebot_components.states import AddService, AddChangeInfo, ChangeVisitImage, AddVisitImage
from massagebot_components.validators import TypeValidator
from massagebot_components.keyboards import create_yesno_keyboard, create_reply_keyboard
from massagebot_components.bot_settings import bot, dp
from massagebot_components.decorators import freeze_check
from aiogram.utils.exceptions import MessageToDeleteNotFound


#Important instances of classes for the futher work

record = Record()
service = Service()
info = DoctorInfo()
visitimages = VisitImage()
tutorial = Tutorial()

#A dict for the adding a new service 

new_service = {}
new_info = {}
new_visit_image = {}
visit_image_to_delete = {}

#------------------

@dp.message_handler(IDFilter(user_id=os.getenv("USER_ID")), state="*", commands=["start"])
async def start_func(message: types.Message):
    """Handler for the /start command to start a relationship between user and bot"""    

    await message.answer("üòúHello!–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω—ã–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞ http://emassage.com\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ:\n- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤\n- –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —É—Å–ª—É–≥–∏\n- –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n‚ùóÔ∏è–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–æ–∑—Ä–∞–±–æ—Ç–∫–µ,–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è")
    await message.answer(
        "ü•∫–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ?",
        reply_markup=await create_yesno_keyboard(["TUTORIALyes", "TUTORIALno"], ["–î–∞", "–ù–µ—Ç"]))



@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É",state="*")
@freeze_check
async def start_adding_service(message: types.Message):
    """A handler to start an adding of a new service""" 

    current_state = dp.current_state(user=message.from_user.id)
    await current_state.set_state(AddService.CONFIRMING)
    
    await message.answer(
        "üõé–í—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏. –í–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", 
        reply_markup=await create_yesno_keyboard(["CONFIRMING/yes", "CONFIRMING/no"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))


@dp.message_handler(lambda message: (message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —Å–µ–±—è"), state="*")
@freeze_check
async def start_editing_info_about_me(message: types.Message):

    if text_about := await info.get_about_text():
        await bot.send_message(message.chat.id, "–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µüëá")
        await bot.send_message(message.chat.id, text_about)

        return await bot.send_message(
            message.chat.id, "üî®–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ?", 
            reply_markup=await create_yesno_keyboard(["CHANGEyes", "CHANGEno"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))

    await bot.send_message(message.chat.id, "‚ùå–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
    await bot.send_message(
        message.chat.id, "‚úèÔ∏è–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ?", 
        reply_markup=await create_yesno_keyboard(["ADDABOUTyes", "ADDABOUTno"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))


@dp.message_handler(lambda message: (message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"), state="*")
@freeze_check
async def start_editing_visit_images(message: types.Message):

    if visit_images := await visitimages.get_visit_images():

        current_state = dp.current_state(user=message.from_user.id)
        await current_state.set_state(ChangeVisitImage.EDIT_IMAGE)
        for index, image in enumerate(visit_images):
            await message.answer("üñº–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Ññ%d" % (index + 1)) 
            await bot.send_photo(
                    message.chat.id, 
                    image[1], 
                    reply_markup=await create_yesno_keyboard(["edit_%s" % (image[0], ), "delete_%s" % (image[0], )], ["‚úÖ–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "‚ùå–£–¥–∞–ª–∏—Ç—å"]))
        return await message.answer(
            "ü§î–ú–æ–∂–µ—Ç –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?", 
            reply_markup = await create_yesno_keyboard(["NEWVISITIMAGE"], ["‚úÖ–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]))
    await message.answer("üò¢–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    await message.answer(
        "üñº–ú–æ–∂–µ—Ç –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?", 
        reply_markup = await create_yesno_keyboard(["NEWVISITIMAGE"], ["‚úÖ–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]))
    

@dp.callback_query_handler(lambda query: query.data == "NEWVISITIMAGE", state="*")
@freeze_check
async def start_adding_new_visit_image(query: types.InlineQuery):

    try:
        all_message_number = len(await visitimages.get_visit_images()) * 2 + 1
    except TypeError:
        all_message_number = 1
    for index in range(-all_message_number, 1):
        await bot.delete_message(query.message.chat.id, message_id=query.message.message_id + index)
    current_state = dp.current_state(user=query.from_user.id)
    await current_state.set_state(AddVisitImage.ADD_IMAGE)
    await query.message.answer("ü§≤–û—Ç–æ—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


@dp.message_handler(content_types=["photo"], state = AddVisitImage.ADD_IMAGE)
@freeze_check
async def add_new_visit_image(photo: types.InputMedia):

    image = await photo["photo"][1].get_file()
    new_visit_image[photo.from_user.id] = {}
    new_visit_image[photo.from_user.id]["photo_path"] = image.file_path
    new_visit_image[photo.from_user.id]["photo"] = await bot.download_file(image.file_path)
    photo_to_send = await bot.download_file(image.file_path)
    await bot.send_photo(photo.chat.id, photo=photo_to_send.read())
    await photo.answer(
        "ü§î–í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç—å?", 
        reply_markup = await create_yesno_keyboard(["NEWVISITIMAGEAGREE", "NEWVISITIMAGEDISAGREE"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))


@dp.callback_query_handler(lambda query: (query.data in ["NEWVISITIMAGEAGREE", "NEWVISITIMAGEDISAGREE"]), state=AddVisitImage.ADD_IMAGE)
@freeze_check
async def agreement_width_new_visit_image(query: types.InlineQuery):

    current_state = dp.current_state(user=query.from_user.id)
    if query.data == "NEWVISITIMAGEAGREE":

        for index in range(-1, 1):
            await bot.delete_message(query.message.chat.id, query.message.message_id + index)
        await current_state.reset_state()
        await visitimages.add_new_visit_image(
            new_visit_image[query.from_user.id]["photo_path"], 
            new_visit_image[query.from_user.id]["photo"])
        return await query.message.answer("üòÑ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")

    await current_state.set_state(AddVisitImage.ADD_IMAGE)
    await query.message.answer("ü§≤–û—Ç–æ—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")


@dp.callback_query_handler(lambda query: (query.data in ["CHANGEyes", "CHANGEno"]), state="*")
@freeze_check
async def change_about_text(query: types.InlineQuery):

    if query.data == "CHANGEyes":
        for index in range(-1,1):
            await bot.delete_message(query.message.chat.id, message_id=query.message.message_id + index)
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddChangeInfo.INFO)
        await query.message.answer("ü§≤–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    else:
        for index in range(-1,1):
            await bot.delete_message(query.message.chat.id, message_id=query.message.message_id + index)
        await query.message.answer("üòî–û–∫")


@dp.callback_query_handler(lambda query: (query.data in ["ADDABOUTyes", "ADDABOUTno"]), state="*")
@freeze_check
async def change_about_text(query: types.InlineQuery):

    if query.data == "ADDABOUTyes":
        for index in range(-1,1):
            await bot.delete_message(query.message.chat.id, message_id=query.message.message_id + index)
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddChangeInfo.INFO)
        await query.message.answer("ü§≤–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    else:
        for index in range(-1,1):
            await bot.delete_message(query.message.chat.id, message_id=query.message.message_id + index)
        await query.message.answer("üòî–û–∫")


@dp.message_handler(state=AddChangeInfo.INFO)
@freeze_check
async def set_new_text(message: types.Message):
    
    if message.text:
        await message.answer(message.text)

        new_info[message.from_user.id] = {"about_text": message.text}
        current_state = dp.current_state(user=message.from_user.id)
        await current_state.set_state(AddChangeInfo.CONFIRMING)

        return await message.answer(
            "ü§î–í–∞–º –≤—Å–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è?", 
            reply_markup=await create_yesno_keyboard(["CHANGEINFOyes", "CHANGEINFOno"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))
    await message.answer("üò¶–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏")


@dp.callback_query_handler(lambda query: (query.data in ["CHANGEINFOyes", "CHANGEDINFOno"]),state=AddChangeInfo.CONFIRMING)
@freeze_check
async def agree_with_changed_text(query: types.InlineQuery):
    
    if query.data == "CHANGEINFOyes":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddChangeInfo.AGGRE_WITH_START_ADD_DE_VERSION)

        await query.message.answer(
            "üá©üá™–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑–∏–∫–µ?", 
            reply_markup=await create_yesno_keyboard(["ADDDEVERSIONyes", "ADDDEVERSIONno"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))
    else:
        del new_info[query.from_user.id]

        await query.message.answer(
            "ü§î–ñ–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
            reply_markup=await create_yesno_keyboard(["AGREEWITHCHANGEyes", "AGREEWITHCHANGEno"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))


@dp.callback_query_handler(lambda query: (query.data in ["ADDDEVERSIONyes", "ADDDEVERSIONno"]), state=AddChangeInfo.AGGRE_WITH_START_ADD_DE_VERSION)
@freeze_check
async def add_de_version(query: types.InlineQuery):

    current_state = dp.current_state(user=query.from_user.id)
    if query.data == "ADDDEVERSIONyes":
        await current_state.set_state(AddChangeInfo.ADD_DE_VERSION)
        await query.message.answer("ü§≤–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    else:
        await info.set_about_text(new_info[query.from_user.id])
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        del new_info[query.from_user.id]
        await query.message.answer("ü•≥–û–∫.–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


@dp.message_handler(state=AddChangeInfo.ADD_DE_VERSION)
@freeze_check
async def confirm_adding_de_version(message: types.Message):

    if message.text:
        new_info[message.from_user.id]["about_text_de"] = message.text
        await message.answer(message.text)
        current_state = dp.current_state(user=message.from_user.id)
        await current_state.set_state(AddChangeInfo.ADD_DE_VERSION_CONFIRMING)    
        return await message.answer(
            "ü§î–í–∞–º –≤—Å–µ –Ω—Ä–∞–≤–∏—Ç—å—Å—è?", 
            reply_markup=await create_yesno_keyboard(["AGREEWITHDEyes", "AGREEWITHDEno"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))
    await message.answer("üò§–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π")


@dp.callback_query_handler(lambda query: (query.data in ["AGREEWITHDEyes", "AGREEWITHDEno"]), state = AddChangeInfo.ADD_DE_VERSION_CONFIRMING)
@freeze_check
async def confirming_de_version(query: types.InlineQuery):

    if query.data == "AGREEWITHDEyes":
        await info.set_about_text(new_info[query.from_user.id])
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        del new_info[query.from_user.id]
        await query.message.answer("üëå–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    else:
        await query.message.answer(
            "ü§î–ñ–µ–ª–∞–µ—Ç–µ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å?",
            reply_markup=await create_yesno_keyboard(["WANNACHANGEyes", "WANNACHANGEno"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))


@dp.callback_query_handler(lambda query: (query.data in ["WANNACHANGEyes", "WANNACHANGEno"]), state="*")
@freeze_check
async def wanna_change_de_version(query: types.InlineQuery):

    if query.data == "WANNACHANGEyes":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddChangeInfo.ADD_DE_VERSION)
        await query.message.answer("ü§≤–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?")
    else:
        del new_info[query.from_user.id]["about_text_de"]
        await info.set_about_text(bot, query, new_info[query.from_user.id])
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        await query.message.answer("üò≠–û–∫, –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")


@dp.callback_query_handler(lambda query: (query.data in ["AGREEWITHCHANGEyes", "AGREEWITHCHANGEno"]), state="*")
@freeze_check
async def change_filled_text(query: types.InlineQuery):

    if query.data == "AGREEWITHCHANGEyes":
        await query.message.answer("üòä–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddChangeInfo.INFO)
    else:
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        await query.message.answer("üò≠–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")


@dp.message_handler(state=AddService.NAME)
@freeze_check
async def add_name_to_service(message: types.Message):
    """Handler to process the adding of a name to a new service"""

    await message.answer(
        "ü§î–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '%s'.–í—ã —É–≤–µ—Ä–µ–Ω—ã?" % (message.text), 
        reply_markup=await create_yesno_keyboard(["NAME/yes", "NAME/no"], ["‚úÖ–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å"])) 


@dp.message_handler(state=AddService.NAME_DE)
@freeze_check
async def add_name_to_service(message: types.Message):
    """Handler to process the adding of a name to a new service"""

    await message.answer(
        "üá©üá™–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º '%s'.–í—ã —É–≤–µ—Ä–µ–Ω—ã?" % (message.text), 
        reply_markup=await create_yesno_keyboard(["NAME_DE_/yes", "NAME_DE_/no"], ["‚úÖ–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å"])) 


@dp.message_handler(state=AddService.DESCRIPTION)
@freeze_check
async def add_description_to_service(message: types.Message):
    """Handler to process the adding of a description to a new service"""

    await message.answer(
        "ü§î–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ '%s'.–í—ã —É–≤–µ—Ä–µ–Ω—ã?" % (message.text), 
        reply_markup=await create_yesno_keyboard(["DESCRIPTION/yes", "DESCRIPTION/no"], ["‚úÖ–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å"])) 


@dp.message_handler(state=AddService.DESCRIPTION_DE)
@freeze_check
async def add_description_to_service(message: types.Message):
    """Handler to process the adding of a description to a new service"""

    await message.answer(
        "üá©üá™–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Ç–∞–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º '%s'.–í—ã —É–≤–µ—Ä–µ–Ω—ã?" % (message.text), 
        reply_markup=await create_yesno_keyboard(["DESCRIPTION_DE_/yes", "DESCRIPTION_DE_/no"], ["‚úÖ–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å"])) 


@dp.message_handler(state=AddService.PRICE)
@freeze_check
async def add_price_to_service(message: types.Message):
    """Handler to process the adding of a price to a new service"""

    if await TypeValidator.is_digit(message.text):
        return await message.answer(
            "üòé–¶–µ–Ω–∞ –Ω–æ–≤–æ—Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —É—Å–ª—É–≥–∏ '%s'.–ü—Ä–æ–¥–æ–ª–∂–∏–º?" % (message.text), 
            reply_markup=await create_yesno_keyboard(["PRICE/yes", "PRICE/no"], ["‚úÖ–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å"])) 
    await message.answer("üëø–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º! –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")


@dp.callback_query_handler(lambda query: (query.data in ["EUR", "USD", "UAH", "CHF"]), state="*")
@freeze_check
async def add_currency_to_service(query: types.CallbackQuery):
    """Handler to process the adding of a currency to a new service"""

    new_service[query.from_user.id]["currency"] = query.data
    await bot.delete_message(query.message.chat.id, message_id=query.message.message_id)
    current_state = dp.current_state(user=query.from_user.id)
    await current_state.set_state(AddService.CURRENCY)
    return await query.message.answer(
        "–í–∞–ª—é—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ - '%s'.–ü—Ä–∞–≤–∏–ª—å–Ω–æ?üí∞" % (query.data), 
        reply_markup=await create_yesno_keyboard(["CURRENCY/yes", "CURRENCY/no"], ["‚úÖ–î–∞,—Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå–ù–µ—Ç,—Ö–æ—á—É –ø–æ–º–µ–Ω—è—Ç—å"])) 


@dp.message_handler(state=AddService.PHOTO, content_types=["photo"])
@freeze_check
async def add_image_to_service(file :types.InputMediaPhoto):
    """Handler to process the adding of a photo to a new service"""

    photo = await file["photo"][1].get_file()
    photo_to_send = await bot.download_file(photo.file_path)
    await bot.send_photo(file.chat.id, photo=photo_to_send.read())
    new_service[file.from_user.id]["photo"] = photo

    await bot.send_message(
        file.chat.id, 
        text="ü§î–¢–æ—á–Ω–æ?", 
        reply_markup=await create_yesno_keyboard(["PHOTO/yes", "PHOTO/no"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))


@dp.message_handler(state=AddService.PHOTO)
@freeze_check
async def image_getter(message :types.Message):
    """Handler to notificate user that he needs to a photo not a text"""

    await message.answer(text="üò§–¢–µ–∫—Å—Ç - –Ω–µ —Ñ–æ—Ç–æ!")


@dp.message_handler(CommandHelp(),IDFilter(user_id=os.getenv("USER_ID")),state="*")
@freeze_check
async def help_command(message :types.Message):
    """Sends some information about this bot"""

    await message.answer("‚ùóÔ∏è–î–∞–Ω–Ω—ã–π –±–æ—Ç –±—ã–ª —Ä–æ–∑—Ä–∞–±–æ—Ç–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Å–∞–π—Ç–∞ http://emassage.name")


@dp.callback_query_handler(lambda query: query.data == "tutorial", state="*")
@freeze_check
async def tutorial_callback(query: types.CallbackQuery):
    """Handler for the test confirming button"""

    for index in range(-1,7):
        await bot.delete_message(chat_id=query.message.chat.id,message_id=query.message.message_id+index)
    await query.message.answer(text="üòò–ú–æ–ª–æ–¥–µ—Ü!–û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ!\n–ê –∫–∞–∫ –Ω–∞–≥—Ä–∞–¥—É,–ø—É–ª–∏—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç!")
    await query.message.answer(text=await random_fact())
    if await utils.test_request():
        loop = asyncio.get_running_loop()
        loop.create_task(record.start_pooling())
        return await query.message.answer(text="‚ò∫Ô∏è–ù—É,–∞ —è,–Ω–∞—á–Ω—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–∏–∞–Ω—Å—ã!")  
    return await utils.connection_revise()


@dp.callback_query_handler(lambda query: ( query.data in ["TUTORIALno", "TUTORIALyes"] ), state="*")
@freeze_check
async def tutorial_passage(query :types.CallbackQuery):
    """Handler to understand wether user wants to pass a tutorial"""

    if query.data == "TUTORIALyes":
        for index in range(-1,1):
            await bot.delete_message(chat_id=query.message.chat.id,message_id=query.message.message_id+index)
        await tutorial.send_tutorial(query)
    else:
        if await utils.test_request():
            loop = asyncio.get_running_loop()
            loop.create_task(record.start_pooling())
            for index in range(-1,1):
                await bot.delete_message(chat_id=query.message.chat.id,message_id=query.message.message_id+index)
            return await query.message.answer(
                "üòî–ù—É –ª–∞–¥–Ω–æ,–Ω–∞—á–Ω—É-–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–∏–∞–Ω—Å—ã", 
                reply_markup=await create_reply_keyboard(["–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É", "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —Å–µ–±—è", "–ò–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ"]))
        return await utils.connection_revise()


@dp.callback_query_handler(lambda query: ( query.data in 
    ["CONFIRMING/no", "CONFIRMING/yes", "NAME/no", "NAME/yes",
    "NAME_DE_/no", "NAME_DE_/yes", "DESCRIPTION/no", "DESCRIPTION/yes",
    "DESCRIPTION_DE_/no", "DESCRIPTION_DE_/yes", "PRICE/no", "PRICE/yes",
    "CURRENCY/no", "CURRENCY/yes", "PHOTO/no", "PHOTO/yes"]), state="*")
@freeze_check
async def callback(query: types.CallbackQuery):
    """Handler for the creating a new service.
    Contains:
    -> CONFIRMING processor
    -> NAME processor
    -> DESCRIPTION processor
    -> PRICE processor
    -> CURRENCY processor
    -> PHOTO processor
    """

    current_state = dp.current_state(user=query.from_user.id)
    if query.data == "CONFIRMING/yes":
        new_service[query.from_user.id] = {}
        await current_state.set_state(AddService.NAME)
        await query.message.answer("üìã–û–∫, –Ω–∞—á–Ω–µ–º —Å –Ω–∞–∑–≤–∞–Ω–∏—è")
    elif query.data == "CONFIRMING/no":
        await current_state.reset_state()
        await query.message.answer("üòí–ù—É –ª–∞–¥–Ω–æ")
    else:
        if query.data.split("/")[0][-1] == "_" and query.data.split("/")[1] == "yes":
            new_service[query.from_user.id]["%s" % (query.data.split("/")[0][:-1].lower())] = query.message.text.split("'")[1]

        if query.data.split("/")[1] == "yes" and query.data.split("/")[0] != "PHOTO":
            new_service[query.from_user.id]["%s" % (query.data.split("/")[0].lower())] = query.message.text.split("'")[1]

        if query.data == "NAME/no":
            await current_state.set_state(AddService.NAME)
            await query.message.answer("üñå–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")

        elif query.data == "NAME/yes":
            await current_state.set_state(AddService.NAME_DE)
            await query.message.answer("üá©üá™–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º")

        elif query.data == "NAME_DE_/no":
            await current_state.set_state(AddService.NAME_DE)
            await query.message.answer("üñå–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")

        elif query.data == "NAME_DE_/yes":
            await current_state.set_state(AddService.DESCRIPTION)
            await query.message.answer("üìÑ–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é")

        elif query.data == "DESCRIPTION/no":
            await current_state.set_state(AddService.DESCRIPTION)
            await query.message.answer("üñå–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")

        elif query.data == "DESCRIPTION/yes":
            await current_state.set_state(AddService.DESCRIPTION_DE)
            await query.message.answer("üá©üá™–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º")

        elif query.data == "DESCRIPTION_DE_/no":
            await current_state.set_state(AddService.DESCRIPTION_DE)
            await query.message.answer("üñå–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º")

        elif query.data == "DESCRIPTION_DE_/yes":
            await current_state.set_state(AddService.PRICE)
            await query.message.answer("üíµ–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏")

        elif query.data == "PRICE/no":
            await current_state.set_state(AddService.PRICE)
            await query.message.answer("üñå–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥—É—é —Ü–µ–Ω—É")

        elif query.data == "PRICE/yes":
            await current_state.set_state(AddService.CURRENCY)
            await query.message.answer("üí∞–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –≤–∞–ª—é—Ç–µ")
            await query.message.answer(
                "–í–∏–±–µ—Ä–µ—Ç–µ", 
                reply_markup = await create_yesno_keyboard(["EUR", "USD", "UAH", "CHF"], ["EUR", "USD", "UAH", "CHF"]))

        elif query.data == "CURRENCY/no":
            await current_state.set_state(AddService.CURRENCY)
            await query.message.answer("üñå–ü–æ–º–µ–Ω—è–π—Ç–µ –≤–∞–ª—é—Ç—É")

        elif query.data == "CURRENCY/yes":
            await current_state.set_state(AddService.PHOTO)
            await query.message.answer("üñº–í—Ä–µ–º—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —É—Å–ª—É–≥–∏.")

        elif query.data == "PHOTO/no":
            await current_state.set_state(AddService.PHOTO)
            await query.message.answer("üñå–û–∫,–ø–æ–º–µ–Ω—è–π—Ç–µ —Ñ–æ—Ç–æ")

        elif query.data == "PHOTO/yes":
            
            photo = await bot.download_file(new_service[query.from_user.id]["photo"].file_path)
            await bot.send_photo(query.message.chat.id, photo=photo)
            await bot.send_message(
                query.message.chat.id,
                text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n%s–û–ø–∏—Å–∞–Ω–∏–µ: %s\n%s–¶–µ–Ω–∞: %s %s\n" % (
                    new_service[query.from_user.id]["name"],
                    (("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º: " + new_service[query.from_user.id]["name_de"] + "\n") if new_service[query.from_user.id].get("name_de") else ""),
                    new_service[query.from_user.id]["description"],
                    (("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º: " + new_service[query.from_user.id]["description_de"] + "\n") if new_service[query.from_user.id].get("description_de") else ""),
                    new_service[query.from_user.id]["price"],
                    new_service[query.from_user.id]["currency"]
                ))
            await query.message.answer("üìù–ü—Ä–æ–≤–µ—Ä—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏")
            await query.message.answer(
                "ü§î–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?", 
                reply_markup = await create_yesno_keyboard(["ADDyes", "ADDno"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))

    await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)


@dp.callback_query_handler(lambda query: True, state=ChangeVisitImage.EDIT_IMAGE)
@freeze_check
async def edit_visit_image(query: types.InlineQuery):
    
    current_state = dp.current_state(user=query.from_user.id)
    pk_from_query_data = query.data.split("_")[1]

    if query.data.split("_")[0] == "edit":
        new_visit_image[query.from_user.id] = {"pk": pk_from_query_data}
        await current_state.set_state(ChangeVisitImage.EDIT_PROCESS)
        await query.message.answer("ü§≤–û—Ç–æ—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ")
    else:
        visit_image_to_delete[query.from_user.id] = {"pk": pk_from_query_data}
        await current_state.set_state(ChangeVisitImage.DELETE_PROCESS)
        await query.message.answer(
            "ü§î–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
            reply_markup=await create_yesno_keyboard(["DELETEIMAGEyes", "DELETEIMAGEno"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))
        



@dp.message_handler(content_types=["photo"], state=ChangeVisitImage.EDIT_PROCESS)
@freeze_check
async def set_visit_image_process(message: types.InputMedia):
    
    photo_path = await message["photo"][1].get_file()
    photo = await bot.download_file(photo_path.file_path)
    await bot.send_photo(message.chat.id, photo)
    await message.answer(
        "ü§î–í–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç—å —Ç–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?",
        reply_markup=await create_yesno_keyboard(["VISITIMAGEyes", "VISITIMAGEno"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))
    new_visit_image[message.from_user.id]["visitimage"] = await bot.download_file(photo_path.file_path)
    new_visit_image[message.from_user.id]["visitimage_path"] = photo_path.file_path



@dp.callback_query_handler(lambda query:(query.data in ["VISITIMAGEyes", "VISITIMAGEno"]), state=ChangeVisitImage.EDIT_PROCESS)
@freeze_check
async def agree_with_new_visitimage(query: types.InlineQuery):

    try:
        all_message_number = len(await visitimages.get_visit_images()) * 2 + 4
    except TypeError:
        all_message_number = 1
    for index in range(-all_message_number, 1):
        await bot.delete_message(query.message.chat.id, query.message.message_id + index)

    if query.data == "VISITIMAGEyes":
        await visitimages.set_visit_image(new_visit_image[query.from_user.id])
        await query.message.answer("üòÑ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    else:
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        await query.message.answer("üòû–û–∫")


@dp.callback_query_handler(lambda query: (query.data in ["DELETEIMAGEyes", "DELETEIMAGEno"]), state=ChangeVisitImage.DELETE_PROCESS)
@freeze_check
async def delete_visit_image(query: types.InlineQuery):
    
    if query.data == "DELETEIMAGEyes":
        try:
            all_message_number = len(await visitimages.get_visit_images()) * 2 + 3
        except TypeError:
            all_message_number = 1
        for index in range(-all_message_number, 1):
            await bot.delete_message(query.message.chat.id, query.message.message_id + index)
        await visitimages.delete_visit_image({"pk":visit_image_to_delete[query.from_user.id]["pk"]})
        return await query.message.answer("ü•≥–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    await query.message.answer("üòîO–∫")


@dp.callback_query_handler(lambda query: (query.data in ["ADDyes", "ADDno"]), state="*")
@freeze_check
async def service_add_confiramtion(query: types.CallbackQuery):
    """Handler to understand wether user wants to add a new service"""

    if query.data == "ADDyes":
        photo = await bot.download_file(new_service[query.from_user.id]["photo"].file_path)
        photo_path = new_service[query.from_user.id]["photo"].file_path
        del new_service[query.from_user.id]["photo"]
        await service.create_new_service(new_service[query.from_user.id], photo, photo_path)
        await bot.delete_message(query.message.chat.id, message_id=query.message.message_id)
        await query.message.answer("ü•≥–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!–£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

    elif query.data == "ADDno":
        await bot.delete_message(query.message.chat.id, message_id=query.message.message_id)
        await query.message.answer(
            "üòâ–û–∫,—Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å?",
            reply_markup=create_yesno_keyboard(["REWRITEyes", "REWRITEno"], ["‚úÖ–î–∞", "‚ùå–ù–µ—Ç"]))


@dp.callback_query_handler(lambda query: (query.data in ["REWRITEyes", "REWRITEno"]), state="*")
@freeze_check
async def rewrite_confiramation(query: types.CallbackQuery):
    """Handler to understand whether user wants to rewrite his new service or not"""

    if query.data == "REWRITEyes":
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.set_state(AddService.NAME)
        await query.message.answer("üëå–•–æ—Ä–æ—à–æ –Ω–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞.–ê –∏–º–µ–Ω–Ω–æ —Å –Ω–∞–∑–≤–∞–Ω–∏—è")
        
    else:
        current_state = dp.current_state(user=query.from_user.id)
        await current_state.reset_state()
        await query.message.answer("üòí–ù—É –ª–∞–¥–Ω–æ")
    

@dp.callback_query_handler(lambda query: True, state="*")
@freeze_check
async def client_confirmation(query: types.CallbackQuery):
    """A callback hander to make the record inactive and done"""

    author_name = await utils.update_data_and_get_author(params={"pk": query.data}, json_data={"status": True})
    author_name_to_send = author_name if author_name else "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    await bot.edit_message_text(text=f"‚úÖ–ó–∞–∫–∞–∑ –¥–ª—è {author_name_to_send} - –≤—ã–ø–æ–ª–Ω–µ–Ω", 
            message_id=query.message.message_id, 
            chat_id=query.message.chat.id)    


executor.start_polling(dp, skip_updates=True, timeout=10)
